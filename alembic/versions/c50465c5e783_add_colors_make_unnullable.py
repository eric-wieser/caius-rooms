"""Add colors, make unnullable

Revision ID: c50465c5e783
Revises: ef2649b351e0
Create Date: 2016-02-15 19:58:50.535000

"""

# revision identifiers, used by Alembic.
revision = 'c50465c5e783'
down_revision = 'ef2649b351e0'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_live():
    ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('room_band_modifier_prices', 'discount',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)
    op.alter_column('room_band_modifiers', 'description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('room_band_modifiers', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('room_band_prices', 'rent',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)
    op.add_column('room_bands', sa.Column('color', sa.String(length=6), nullable=True))
    op.alter_column('room_bands', 'description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('room_bands', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)

    import colorsys

    def color(h, s, l):
        h = h / 360.0
        r, g, b = colorsys.hls_to_rgb(h, l, s)
        r = int(255*r + 0.5)
        g = int(255*g + 0.5)
        b = int(255*b + 0.5)
        return "{:02X}{:02X}{:02X}".format(r, g, b)

    colors = {
      'A': color(300, 0.7, 0.3),
      'B': color(300, 0.7, 0.5),
      'C': color(300, 0.7, 0.7),
      'D': color(240, 0.7, 0.3),
      'E': color(240, 0.7, 0.5),
      'F': color(240, 0.7, 0.7),
      'G': color(180, 0.7, 0.3),
      'H': color(180, 0.7, 0.5),
      'I': color(180, 0.7, 0.7)
    }

    bands = sa.sql.table('room_bands', sa.sql.column('name'), sa.sql.column('color'))
    for name, color in colors.items():
        op.execute(bands.update().where(bands.c.name==name).values(color=color))


    op.alter_column('room_bands', 'color', existing_type=sa.String(length=6), nullable=True)
    ### end Alembic commands ###


def downgrade_live():
    ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('room_bands', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('room_bands', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_column('room_bands', 'color')
    op.alter_column('room_band_prices', 'rent',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
    op.alter_column('room_band_modifiers', 'name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('room_band_modifiers', 'description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('room_band_modifier_prices', 'discount',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
    ### end Alembic commands ###

